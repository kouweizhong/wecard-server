// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: beans/BeanHeroMessage.proto

package com.ninelook.wecard.protocol.beans;

public final class BeanHeroMessage {
  private BeanHeroMessage() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface HeroInfoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int64 uid = 1;
    /**
     * <code>required int64 uid = 1;</code>
     *
     * <pre>
     *用户ID
     * </pre>
     */
    boolean hasUid();
    /**
     * <code>required int64 uid = 1;</code>
     *
     * <pre>
     *用户ID
     * </pre>
     */
    long getUid();

    // required int32 eid = 2;
    /**
     * <code>required int32 eid = 2;</code>
     *
     * <pre>
     *唯一ID
     * </pre>
     */
    boolean hasEid();
    /**
     * <code>required int32 eid = 2;</code>
     *
     * <pre>
     *唯一ID
     * </pre>
     */
    int getEid();

    // required int32 type = 3;
    /**
     * <code>required int32 type = 3;</code>
     *
     * <pre>
     *实体类型
     * </pre>
     */
    boolean hasType();
    /**
     * <code>required int32 type = 3;</code>
     *
     * <pre>
     *实体类型
     * </pre>
     */
    int getType();

    // required int32 camp = 4;
    /**
     * <code>required int32 camp = 4;</code>
     *
     * <pre>
     *英雄所属阵型
     * </pre>
     */
    boolean hasCamp();
    /**
     * <code>required int32 camp = 4;</code>
     *
     * <pre>
     *英雄所属阵型
     * </pre>
     */
    int getCamp();

    // required int32 serverId = 5;
    /**
     * <code>required int32 serverId = 5;</code>
     *
     * <pre>
     *武将serverId
     * </pre>
     */
    boolean hasServerId();
    /**
     * <code>required int32 serverId = 5;</code>
     *
     * <pre>
     *武将serverId
     * </pre>
     */
    int getServerId();

    // required int32 level = 6;
    /**
     * <code>required int32 level = 6;</code>
     *
     * <pre>
     *武将等级
     * </pre>
     */
    boolean hasLevel();
    /**
     * <code>required int32 level = 6;</code>
     *
     * <pre>
     *武将等级
     * </pre>
     */
    int getLevel();

    // required int32 skillId = 7;
    /**
     * <code>required int32 skillId = 7;</code>
     *
     * <pre>
     *技能ID
     * </pre>
     */
    boolean hasSkillId();
    /**
     * <code>required int32 skillId = 7;</code>
     *
     * <pre>
     *技能ID
     * </pre>
     */
    int getSkillId();

    // required int32 blood = 8;
    /**
     * <code>required int32 blood = 8;</code>
     *
     * <pre>
     *武将血量
     * </pre>
     */
    boolean hasBlood();
    /**
     * <code>required int32 blood = 8;</code>
     *
     * <pre>
     *武将血量
     * </pre>
     */
    int getBlood();

    // required int32 attackNum = 9;
    /**
     * <code>required int32 attackNum = 9;</code>
     *
     * <pre>
     *攻击力
     * </pre>
     */
    boolean hasAttackNum();
    /**
     * <code>required int32 attackNum = 9;</code>
     *
     * <pre>
     *攻击力
     * </pre>
     */
    int getAttackNum();

    // required int32 defenceNum = 10;
    /**
     * <code>required int32 defenceNum = 10;</code>
     *
     * <pre>
     *防御力
     * </pre>
     */
    boolean hasDefenceNum();
    /**
     * <code>required int32 defenceNum = 10;</code>
     *
     * <pre>
     *防御力
     * </pre>
     */
    int getDefenceNum();

    // required int32 magicAttackNum = 11;
    /**
     * <code>required int32 magicAttackNum = 11;</code>
     *
     * <pre>
     *魔法攻击力
     * </pre>
     */
    boolean hasMagicAttackNum();
    /**
     * <code>required int32 magicAttackNum = 11;</code>
     *
     * <pre>
     *魔法攻击力
     * </pre>
     */
    int getMagicAttackNum();

    // required int32 magicDefense = 12;
    /**
     * <code>required int32 magicDefense = 12;</code>
     *
     * <pre>
     *魔法防御力
     * </pre>
     */
    boolean hasMagicDefense();
    /**
     * <code>required int32 magicDefense = 12;</code>
     *
     * <pre>
     *魔法防御力
     * </pre>
     */
    int getMagicDefense();

    // required float speed = 13;
    /**
     * <code>required float speed = 13;</code>
     *
     * <pre>
     *移动速度
     * </pre>
     */
    boolean hasSpeed();
    /**
     * <code>required float speed = 13;</code>
     *
     * <pre>
     *移动速度
     * </pre>
     */
    float getSpeed();

    // required int32 x = 14;
    /**
     * <code>required int32 x = 14;</code>
     *
     * <pre>
     *X轴
     * </pre>
     */
    boolean hasX();
    /**
     * <code>required int32 x = 14;</code>
     *
     * <pre>
     *X轴
     * </pre>
     */
    int getX();
  }
  /**
   * Protobuf type {@code HeroInfo}
   *
   * <pre>
   *英雄信息
   * </pre>
   */
  public static final class HeroInfo extends
      com.google.protobuf.GeneratedMessage
      implements HeroInfoOrBuilder {
    // Use HeroInfo.newBuilder() to construct.
    private HeroInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private HeroInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final HeroInfo defaultInstance;
    public static HeroInfo getDefaultInstance() {
      return defaultInstance;
    }

    public HeroInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private HeroInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              uid_ = input.readInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              eid_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              type_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              camp_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              serverId_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              level_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              skillId_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              blood_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              attackNum_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              defenceNum_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              magicAttackNum_ = input.readInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              magicDefense_ = input.readInt32();
              break;
            }
            case 109: {
              bitField0_ |= 0x00001000;
              speed_ = input.readFloat();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              x_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ninelook.wecard.protocol.beans.BeanHeroMessage.internal_static_HeroInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ninelook.wecard.protocol.beans.BeanHeroMessage.internal_static_HeroInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo.class, com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo.Builder.class);
    }

    public static com.google.protobuf.Parser<HeroInfo> PARSER =
        new com.google.protobuf.AbstractParser<HeroInfo>() {
      public HeroInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new HeroInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<HeroInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int64 uid = 1;
    public static final int UID_FIELD_NUMBER = 1;
    private long uid_;
    /**
     * <code>required int64 uid = 1;</code>
     *
     * <pre>
     *用户ID
     * </pre>
     */
    public boolean hasUid() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int64 uid = 1;</code>
     *
     * <pre>
     *用户ID
     * </pre>
     */
    public long getUid() {
      return uid_;
    }

    // required int32 eid = 2;
    public static final int EID_FIELD_NUMBER = 2;
    private int eid_;
    /**
     * <code>required int32 eid = 2;</code>
     *
     * <pre>
     *唯一ID
     * </pre>
     */
    public boolean hasEid() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 eid = 2;</code>
     *
     * <pre>
     *唯一ID
     * </pre>
     */
    public int getEid() {
      return eid_;
    }

    // required int32 type = 3;
    public static final int TYPE_FIELD_NUMBER = 3;
    private int type_;
    /**
     * <code>required int32 type = 3;</code>
     *
     * <pre>
     *实体类型
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 type = 3;</code>
     *
     * <pre>
     *实体类型
     * </pre>
     */
    public int getType() {
      return type_;
    }

    // required int32 camp = 4;
    public static final int CAMP_FIELD_NUMBER = 4;
    private int camp_;
    /**
     * <code>required int32 camp = 4;</code>
     *
     * <pre>
     *英雄所属阵型
     * </pre>
     */
    public boolean hasCamp() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 camp = 4;</code>
     *
     * <pre>
     *英雄所属阵型
     * </pre>
     */
    public int getCamp() {
      return camp_;
    }

    // required int32 serverId = 5;
    public static final int SERVERID_FIELD_NUMBER = 5;
    private int serverId_;
    /**
     * <code>required int32 serverId = 5;</code>
     *
     * <pre>
     *武将serverId
     * </pre>
     */
    public boolean hasServerId() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required int32 serverId = 5;</code>
     *
     * <pre>
     *武将serverId
     * </pre>
     */
    public int getServerId() {
      return serverId_;
    }

    // required int32 level = 6;
    public static final int LEVEL_FIELD_NUMBER = 6;
    private int level_;
    /**
     * <code>required int32 level = 6;</code>
     *
     * <pre>
     *武将等级
     * </pre>
     */
    public boolean hasLevel() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required int32 level = 6;</code>
     *
     * <pre>
     *武将等级
     * </pre>
     */
    public int getLevel() {
      return level_;
    }

    // required int32 skillId = 7;
    public static final int SKILLID_FIELD_NUMBER = 7;
    private int skillId_;
    /**
     * <code>required int32 skillId = 7;</code>
     *
     * <pre>
     *技能ID
     * </pre>
     */
    public boolean hasSkillId() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required int32 skillId = 7;</code>
     *
     * <pre>
     *技能ID
     * </pre>
     */
    public int getSkillId() {
      return skillId_;
    }

    // required int32 blood = 8;
    public static final int BLOOD_FIELD_NUMBER = 8;
    private int blood_;
    /**
     * <code>required int32 blood = 8;</code>
     *
     * <pre>
     *武将血量
     * </pre>
     */
    public boolean hasBlood() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required int32 blood = 8;</code>
     *
     * <pre>
     *武将血量
     * </pre>
     */
    public int getBlood() {
      return blood_;
    }

    // required int32 attackNum = 9;
    public static final int ATTACKNUM_FIELD_NUMBER = 9;
    private int attackNum_;
    /**
     * <code>required int32 attackNum = 9;</code>
     *
     * <pre>
     *攻击力
     * </pre>
     */
    public boolean hasAttackNum() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required int32 attackNum = 9;</code>
     *
     * <pre>
     *攻击力
     * </pre>
     */
    public int getAttackNum() {
      return attackNum_;
    }

    // required int32 defenceNum = 10;
    public static final int DEFENCENUM_FIELD_NUMBER = 10;
    private int defenceNum_;
    /**
     * <code>required int32 defenceNum = 10;</code>
     *
     * <pre>
     *防御力
     * </pre>
     */
    public boolean hasDefenceNum() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>required int32 defenceNum = 10;</code>
     *
     * <pre>
     *防御力
     * </pre>
     */
    public int getDefenceNum() {
      return defenceNum_;
    }

    // required int32 magicAttackNum = 11;
    public static final int MAGICATTACKNUM_FIELD_NUMBER = 11;
    private int magicAttackNum_;
    /**
     * <code>required int32 magicAttackNum = 11;</code>
     *
     * <pre>
     *魔法攻击力
     * </pre>
     */
    public boolean hasMagicAttackNum() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>required int32 magicAttackNum = 11;</code>
     *
     * <pre>
     *魔法攻击力
     * </pre>
     */
    public int getMagicAttackNum() {
      return magicAttackNum_;
    }

    // required int32 magicDefense = 12;
    public static final int MAGICDEFENSE_FIELD_NUMBER = 12;
    private int magicDefense_;
    /**
     * <code>required int32 magicDefense = 12;</code>
     *
     * <pre>
     *魔法防御力
     * </pre>
     */
    public boolean hasMagicDefense() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>required int32 magicDefense = 12;</code>
     *
     * <pre>
     *魔法防御力
     * </pre>
     */
    public int getMagicDefense() {
      return magicDefense_;
    }

    // required float speed = 13;
    public static final int SPEED_FIELD_NUMBER = 13;
    private float speed_;
    /**
     * <code>required float speed = 13;</code>
     *
     * <pre>
     *移动速度
     * </pre>
     */
    public boolean hasSpeed() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>required float speed = 13;</code>
     *
     * <pre>
     *移动速度
     * </pre>
     */
    public float getSpeed() {
      return speed_;
    }

    // required int32 x = 14;
    public static final int X_FIELD_NUMBER = 14;
    private int x_;
    /**
     * <code>required int32 x = 14;</code>
     *
     * <pre>
     *X轴
     * </pre>
     */
    public boolean hasX() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>required int32 x = 14;</code>
     *
     * <pre>
     *X轴
     * </pre>
     */
    public int getX() {
      return x_;
    }

    private void initFields() {
      uid_ = 0L;
      eid_ = 0;
      type_ = 0;
      camp_ = 0;
      serverId_ = 0;
      level_ = 0;
      skillId_ = 0;
      blood_ = 0;
      attackNum_ = 0;
      defenceNum_ = 0;
      magicAttackNum_ = 0;
      magicDefense_ = 0;
      speed_ = 0F;
      x_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasUid()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasEid()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCamp()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasServerId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLevel()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSkillId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBlood()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAttackNum()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDefenceNum()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMagicAttackNum()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMagicDefense()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSpeed()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, uid_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, eid_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, type_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, camp_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, serverId_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, level_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, skillId_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, blood_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(9, attackNum_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(10, defenceNum_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(11, magicAttackNum_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(12, magicDefense_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeFloat(13, speed_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(14, x_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, uid_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, eid_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, type_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, camp_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, serverId_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, level_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, skillId_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, blood_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, attackNum_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, defenceNum_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, magicAttackNum_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, magicDefense_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(13, speed_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, x_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code HeroInfo}
     *
     * <pre>
     *英雄信息
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ninelook.wecard.protocol.beans.BeanHeroMessage.internal_static_HeroInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ninelook.wecard.protocol.beans.BeanHeroMessage.internal_static_HeroInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo.class, com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo.Builder.class);
      }

      // Construct using com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        uid_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        eid_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        camp_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        serverId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        level_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        skillId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        blood_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        attackNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        defenceNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        magicAttackNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        magicDefense_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        speed_ = 0F;
        bitField0_ = (bitField0_ & ~0x00001000);
        x_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ninelook.wecard.protocol.beans.BeanHeroMessage.internal_static_HeroInfo_descriptor;
      }

      public com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo getDefaultInstanceForType() {
        return com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo.getDefaultInstance();
      }

      public com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo build() {
        com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo buildPartial() {
        com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo result = new com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.uid_ = uid_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.eid_ = eid_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.camp_ = camp_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.serverId_ = serverId_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.level_ = level_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.skillId_ = skillId_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.blood_ = blood_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.attackNum_ = attackNum_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.defenceNum_ = defenceNum_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.magicAttackNum_ = magicAttackNum_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.magicDefense_ = magicDefense_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.speed_ = speed_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.x_ = x_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo) {
          return mergeFrom((com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo other) {
        if (other == com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo.getDefaultInstance()) return this;
        if (other.hasUid()) {
          setUid(other.getUid());
        }
        if (other.hasEid()) {
          setEid(other.getEid());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasCamp()) {
          setCamp(other.getCamp());
        }
        if (other.hasServerId()) {
          setServerId(other.getServerId());
        }
        if (other.hasLevel()) {
          setLevel(other.getLevel());
        }
        if (other.hasSkillId()) {
          setSkillId(other.getSkillId());
        }
        if (other.hasBlood()) {
          setBlood(other.getBlood());
        }
        if (other.hasAttackNum()) {
          setAttackNum(other.getAttackNum());
        }
        if (other.hasDefenceNum()) {
          setDefenceNum(other.getDefenceNum());
        }
        if (other.hasMagicAttackNum()) {
          setMagicAttackNum(other.getMagicAttackNum());
        }
        if (other.hasMagicDefense()) {
          setMagicDefense(other.getMagicDefense());
        }
        if (other.hasSpeed()) {
          setSpeed(other.getSpeed());
        }
        if (other.hasX()) {
          setX(other.getX());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasUid()) {
          
          return false;
        }
        if (!hasEid()) {
          
          return false;
        }
        if (!hasType()) {
          
          return false;
        }
        if (!hasCamp()) {
          
          return false;
        }
        if (!hasServerId()) {
          
          return false;
        }
        if (!hasLevel()) {
          
          return false;
        }
        if (!hasSkillId()) {
          
          return false;
        }
        if (!hasBlood()) {
          
          return false;
        }
        if (!hasAttackNum()) {
          
          return false;
        }
        if (!hasDefenceNum()) {
          
          return false;
        }
        if (!hasMagicAttackNum()) {
          
          return false;
        }
        if (!hasMagicDefense()) {
          
          return false;
        }
        if (!hasSpeed()) {
          
          return false;
        }
        if (!hasX()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ninelook.wecard.protocol.beans.BeanHeroMessage.HeroInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int64 uid = 1;
      private long uid_ ;
      /**
       * <code>required int64 uid = 1;</code>
       *
       * <pre>
       *用户ID
       * </pre>
       */
      public boolean hasUid() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int64 uid = 1;</code>
       *
       * <pre>
       *用户ID
       * </pre>
       */
      public long getUid() {
        return uid_;
      }
      /**
       * <code>required int64 uid = 1;</code>
       *
       * <pre>
       *用户ID
       * </pre>
       */
      public Builder setUid(long value) {
        bitField0_ |= 0x00000001;
        uid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 uid = 1;</code>
       *
       * <pre>
       *用户ID
       * </pre>
       */
      public Builder clearUid() {
        bitField0_ = (bitField0_ & ~0x00000001);
        uid_ = 0L;
        onChanged();
        return this;
      }

      // required int32 eid = 2;
      private int eid_ ;
      /**
       * <code>required int32 eid = 2;</code>
       *
       * <pre>
       *唯一ID
       * </pre>
       */
      public boolean hasEid() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 eid = 2;</code>
       *
       * <pre>
       *唯一ID
       * </pre>
       */
      public int getEid() {
        return eid_;
      }
      /**
       * <code>required int32 eid = 2;</code>
       *
       * <pre>
       *唯一ID
       * </pre>
       */
      public Builder setEid(int value) {
        bitField0_ |= 0x00000002;
        eid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 eid = 2;</code>
       *
       * <pre>
       *唯一ID
       * </pre>
       */
      public Builder clearEid() {
        bitField0_ = (bitField0_ & ~0x00000002);
        eid_ = 0;
        onChanged();
        return this;
      }

      // required int32 type = 3;
      private int type_ ;
      /**
       * <code>required int32 type = 3;</code>
       *
       * <pre>
       *实体类型
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 type = 3;</code>
       *
       * <pre>
       *实体类型
       * </pre>
       */
      public int getType() {
        return type_;
      }
      /**
       * <code>required int32 type = 3;</code>
       *
       * <pre>
       *实体类型
       * </pre>
       */
      public Builder setType(int value) {
        bitField0_ |= 0x00000004;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 type = 3;</code>
       *
       * <pre>
       *实体类型
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        type_ = 0;
        onChanged();
        return this;
      }

      // required int32 camp = 4;
      private int camp_ ;
      /**
       * <code>required int32 camp = 4;</code>
       *
       * <pre>
       *英雄所属阵型
       * </pre>
       */
      public boolean hasCamp() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 camp = 4;</code>
       *
       * <pre>
       *英雄所属阵型
       * </pre>
       */
      public int getCamp() {
        return camp_;
      }
      /**
       * <code>required int32 camp = 4;</code>
       *
       * <pre>
       *英雄所属阵型
       * </pre>
       */
      public Builder setCamp(int value) {
        bitField0_ |= 0x00000008;
        camp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 camp = 4;</code>
       *
       * <pre>
       *英雄所属阵型
       * </pre>
       */
      public Builder clearCamp() {
        bitField0_ = (bitField0_ & ~0x00000008);
        camp_ = 0;
        onChanged();
        return this;
      }

      // required int32 serverId = 5;
      private int serverId_ ;
      /**
       * <code>required int32 serverId = 5;</code>
       *
       * <pre>
       *武将serverId
       * </pre>
       */
      public boolean hasServerId() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required int32 serverId = 5;</code>
       *
       * <pre>
       *武将serverId
       * </pre>
       */
      public int getServerId() {
        return serverId_;
      }
      /**
       * <code>required int32 serverId = 5;</code>
       *
       * <pre>
       *武将serverId
       * </pre>
       */
      public Builder setServerId(int value) {
        bitField0_ |= 0x00000010;
        serverId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 serverId = 5;</code>
       *
       * <pre>
       *武将serverId
       * </pre>
       */
      public Builder clearServerId() {
        bitField0_ = (bitField0_ & ~0x00000010);
        serverId_ = 0;
        onChanged();
        return this;
      }

      // required int32 level = 6;
      private int level_ ;
      /**
       * <code>required int32 level = 6;</code>
       *
       * <pre>
       *武将等级
       * </pre>
       */
      public boolean hasLevel() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required int32 level = 6;</code>
       *
       * <pre>
       *武将等级
       * </pre>
       */
      public int getLevel() {
        return level_;
      }
      /**
       * <code>required int32 level = 6;</code>
       *
       * <pre>
       *武将等级
       * </pre>
       */
      public Builder setLevel(int value) {
        bitField0_ |= 0x00000020;
        level_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 level = 6;</code>
       *
       * <pre>
       *武将等级
       * </pre>
       */
      public Builder clearLevel() {
        bitField0_ = (bitField0_ & ~0x00000020);
        level_ = 0;
        onChanged();
        return this;
      }

      // required int32 skillId = 7;
      private int skillId_ ;
      /**
       * <code>required int32 skillId = 7;</code>
       *
       * <pre>
       *技能ID
       * </pre>
       */
      public boolean hasSkillId() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required int32 skillId = 7;</code>
       *
       * <pre>
       *技能ID
       * </pre>
       */
      public int getSkillId() {
        return skillId_;
      }
      /**
       * <code>required int32 skillId = 7;</code>
       *
       * <pre>
       *技能ID
       * </pre>
       */
      public Builder setSkillId(int value) {
        bitField0_ |= 0x00000040;
        skillId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 skillId = 7;</code>
       *
       * <pre>
       *技能ID
       * </pre>
       */
      public Builder clearSkillId() {
        bitField0_ = (bitField0_ & ~0x00000040);
        skillId_ = 0;
        onChanged();
        return this;
      }

      // required int32 blood = 8;
      private int blood_ ;
      /**
       * <code>required int32 blood = 8;</code>
       *
       * <pre>
       *武将血量
       * </pre>
       */
      public boolean hasBlood() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required int32 blood = 8;</code>
       *
       * <pre>
       *武将血量
       * </pre>
       */
      public int getBlood() {
        return blood_;
      }
      /**
       * <code>required int32 blood = 8;</code>
       *
       * <pre>
       *武将血量
       * </pre>
       */
      public Builder setBlood(int value) {
        bitField0_ |= 0x00000080;
        blood_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 blood = 8;</code>
       *
       * <pre>
       *武将血量
       * </pre>
       */
      public Builder clearBlood() {
        bitField0_ = (bitField0_ & ~0x00000080);
        blood_ = 0;
        onChanged();
        return this;
      }

      // required int32 attackNum = 9;
      private int attackNum_ ;
      /**
       * <code>required int32 attackNum = 9;</code>
       *
       * <pre>
       *攻击力
       * </pre>
       */
      public boolean hasAttackNum() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required int32 attackNum = 9;</code>
       *
       * <pre>
       *攻击力
       * </pre>
       */
      public int getAttackNum() {
        return attackNum_;
      }
      /**
       * <code>required int32 attackNum = 9;</code>
       *
       * <pre>
       *攻击力
       * </pre>
       */
      public Builder setAttackNum(int value) {
        bitField0_ |= 0x00000100;
        attackNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 attackNum = 9;</code>
       *
       * <pre>
       *攻击力
       * </pre>
       */
      public Builder clearAttackNum() {
        bitField0_ = (bitField0_ & ~0x00000100);
        attackNum_ = 0;
        onChanged();
        return this;
      }

      // required int32 defenceNum = 10;
      private int defenceNum_ ;
      /**
       * <code>required int32 defenceNum = 10;</code>
       *
       * <pre>
       *防御力
       * </pre>
       */
      public boolean hasDefenceNum() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>required int32 defenceNum = 10;</code>
       *
       * <pre>
       *防御力
       * </pre>
       */
      public int getDefenceNum() {
        return defenceNum_;
      }
      /**
       * <code>required int32 defenceNum = 10;</code>
       *
       * <pre>
       *防御力
       * </pre>
       */
      public Builder setDefenceNum(int value) {
        bitField0_ |= 0x00000200;
        defenceNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 defenceNum = 10;</code>
       *
       * <pre>
       *防御力
       * </pre>
       */
      public Builder clearDefenceNum() {
        bitField0_ = (bitField0_ & ~0x00000200);
        defenceNum_ = 0;
        onChanged();
        return this;
      }

      // required int32 magicAttackNum = 11;
      private int magicAttackNum_ ;
      /**
       * <code>required int32 magicAttackNum = 11;</code>
       *
       * <pre>
       *魔法攻击力
       * </pre>
       */
      public boolean hasMagicAttackNum() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>required int32 magicAttackNum = 11;</code>
       *
       * <pre>
       *魔法攻击力
       * </pre>
       */
      public int getMagicAttackNum() {
        return magicAttackNum_;
      }
      /**
       * <code>required int32 magicAttackNum = 11;</code>
       *
       * <pre>
       *魔法攻击力
       * </pre>
       */
      public Builder setMagicAttackNum(int value) {
        bitField0_ |= 0x00000400;
        magicAttackNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 magicAttackNum = 11;</code>
       *
       * <pre>
       *魔法攻击力
       * </pre>
       */
      public Builder clearMagicAttackNum() {
        bitField0_ = (bitField0_ & ~0x00000400);
        magicAttackNum_ = 0;
        onChanged();
        return this;
      }

      // required int32 magicDefense = 12;
      private int magicDefense_ ;
      /**
       * <code>required int32 magicDefense = 12;</code>
       *
       * <pre>
       *魔法防御力
       * </pre>
       */
      public boolean hasMagicDefense() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>required int32 magicDefense = 12;</code>
       *
       * <pre>
       *魔法防御力
       * </pre>
       */
      public int getMagicDefense() {
        return magicDefense_;
      }
      /**
       * <code>required int32 magicDefense = 12;</code>
       *
       * <pre>
       *魔法防御力
       * </pre>
       */
      public Builder setMagicDefense(int value) {
        bitField0_ |= 0x00000800;
        magicDefense_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 magicDefense = 12;</code>
       *
       * <pre>
       *魔法防御力
       * </pre>
       */
      public Builder clearMagicDefense() {
        bitField0_ = (bitField0_ & ~0x00000800);
        magicDefense_ = 0;
        onChanged();
        return this;
      }

      // required float speed = 13;
      private float speed_ ;
      /**
       * <code>required float speed = 13;</code>
       *
       * <pre>
       *移动速度
       * </pre>
       */
      public boolean hasSpeed() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>required float speed = 13;</code>
       *
       * <pre>
       *移动速度
       * </pre>
       */
      public float getSpeed() {
        return speed_;
      }
      /**
       * <code>required float speed = 13;</code>
       *
       * <pre>
       *移动速度
       * </pre>
       */
      public Builder setSpeed(float value) {
        bitField0_ |= 0x00001000;
        speed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float speed = 13;</code>
       *
       * <pre>
       *移动速度
       * </pre>
       */
      public Builder clearSpeed() {
        bitField0_ = (bitField0_ & ~0x00001000);
        speed_ = 0F;
        onChanged();
        return this;
      }

      // required int32 x = 14;
      private int x_ ;
      /**
       * <code>required int32 x = 14;</code>
       *
       * <pre>
       *X轴
       * </pre>
       */
      public boolean hasX() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>required int32 x = 14;</code>
       *
       * <pre>
       *X轴
       * </pre>
       */
      public int getX() {
        return x_;
      }
      /**
       * <code>required int32 x = 14;</code>
       *
       * <pre>
       *X轴
       * </pre>
       */
      public Builder setX(int value) {
        bitField0_ |= 0x00002000;
        x_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 x = 14;</code>
       *
       * <pre>
       *X轴
       * </pre>
       */
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00002000);
        x_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:HeroInfo)
    }

    static {
      defaultInstance = new HeroInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:HeroInfo)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_HeroInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_HeroInfo_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\033beans/BeanHeroMessage.proto\032\034beans/Bea" +
      "nSceneMessage.proto\"\360\001\n\010HeroInfo\022\013\n\003uid\030" +
      "\001 \002(\003\022\013\n\003eid\030\002 \002(\005\022\014\n\004type\030\003 \002(\005\022\014\n\004camp" +
      "\030\004 \002(\005\022\020\n\010serverId\030\005 \002(\005\022\r\n\005level\030\006 \002(\005\022" +
      "\017\n\007skillId\030\007 \002(\005\022\r\n\005blood\030\010 \002(\005\022\021\n\tattac" +
      "kNum\030\t \002(\005\022\022\n\ndefenceNum\030\n \002(\005\022\026\n\016magicA" +
      "ttackNum\030\013 \002(\005\022\024\n\014magicDefense\030\014 \002(\005\022\r\n\005" +
      "speed\030\r \002(\002\022\t\n\001x\030\016 \002(\005B\"\n com.hesh.wksoc" +
      "ket.protocol.beans"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_HeroInfo_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_HeroInfo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_HeroInfo_descriptor,
              new java.lang.String[] { "Uid", "Eid", "Type", "Camp", "ServerId", "Level", "SkillId", "Blood", "AttackNum", "DefenceNum", "MagicAttackNum", "MagicDefense", "Speed", "X", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.ninelook.wecard.protocol.beans.BeanSceneMessage.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
